<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Informally Verified</title><link>http://scar26.github.io/</link><description>Recent content on Informally Verified</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 10 Feb 2023 15:15:04 +0530</lastBuildDate><atom:link href="http://scar26.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>FFT Optimizations in ZK SNARKs</title><link>http://scar26.github.io/posts/snark-fft/</link><pubDate>Fri, 10 Feb 2023 15:15:04 +0530</pubDate><guid>http://scar26.github.io/posts/snark-fft/</guid><description>This post is based on the design of the bellman library for zk-SNARKs. Though the majority of these optimizations are agnostic to the actual proving algorithm being used, I&amp;rsquo;ll mainly focus on groth16 for now, which is what bellman implements.
Preliminaries Basic grasp of R1CS and the groth16 proving system. Basic understanding of FFT/NTT
Overview There&amp;rsquo;s 2 main classes of speedups that the bellman library utilizes
Speeding up polynomial operations with Finite Field FFT (or NTT, whatever you wanna call it) Parallelizing vector and elliptic curve operations In this part, we&amp;rsquo;ll discuss only the FFT based optimizations</description></item><item><title>CSAW22 - Attacking a Linear PRNG with LLL</title><link>http://scar26.github.io/posts/csaw22-prng/</link><pubDate>Tue, 15 Nov 2022 18:37:48 +0530</pubDate><guid>http://scar26.github.io/posts/csaw22-prng/</guid><description>This is a writeup of the cryptography task &amp;ldquo;Master of PRNG&amp;rdquo; from the CSAW finals 2022. It had around 6 solves by the end of the CTF.
The first part of this challenge involves generalizing the classic Hidden Number Problem to a case with 2 constants, followed by the usual CVP. The second part additionally involves a simple but subtle observation regarding the public moduli.
The challenge file can be found here: chall.</description></item><item><title>Backdooring Kyber: NIST PQ finalist</title><link>http://scar26.github.io/posts/kyber21/</link><pubDate>Tue, 11 Jan 2022 18:37:48 +0530</pubDate><guid>http://scar26.github.io/posts/kyber21/</guid><description>This is an author writeup for the cryptography challenge &amp;ldquo;Beyond the mountain&amp;rdquo; that I created for Backdoor CTF 2021-22. It was based on a backdoor that I came up with for a slightly reduced version of kyber. The backdoor allows us to create &amp;ldquo;controlled decryption failures&amp;rdquo; in polynomial time.
What I personally found interesting in this challenge while creating it was that the attack is based on a technique I personally have yet to see used in any academic work but is very popular in the cryptography CTF community.</description></item></channel></rss>