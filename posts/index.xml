<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Informally Verified</title><link>http://scar26.github.io/posts/</link><description>Recent content in Posts on Informally Verified</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 10 Feb 2023 15:15:04 +0530</lastBuildDate><atom:link href="http://scar26.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title> FFT Optimizations in ZK SNARKs</title><link>http://scar26.github.io/posts/snark-fft/</link><pubDate>Fri, 10 Feb 2023 15:15:04 +0530</pubDate><guid>http://scar26.github.io/posts/snark-fft/</guid><description>This post is based on the design of the bellman library for zk-SNARKs. Though the majority of these optimizations are agnostic to the actual proving algorithm being used, I&amp;rsquo;ll mainly focus on groth16 for now, which is what bellman implements.
Preliminaries Basic grasp of R1CS and the groth16 proving system. Basic understanding of FFT/NTT
Overview There&amp;rsquo;s 2 main classes of speedups that the bellman library utilizes
Speeding up polynomial operations with Finite Field FFT (or NTT, whatever you wanna call it) Parallelizing vector and elliptic curve operations In this part, we&amp;rsquo;ll discuss only the FFT based optimizations</description><content type="html"><![CDATA[<p>This post is based on the design of the <a href="https://github.com/zkcrypto/bellman">bellman</a> library for zk-SNARKs. Though the majority of these optimizations are agnostic to the actual proving algorithm being used, I&rsquo;ll mainly focus on groth16 for now, which is what bellman implements.</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>Basic grasp of R1CS and the <a href="https://xn--2-umb.com/22/groth16/">groth16</a> proving system. Basic understanding of FFT/NTT</p>
<h2 id="overview">Overview</h2>
<p>There&rsquo;s 2 main classes of speedups that the bellman library utilizes</p>
<ul>
<li>Speeding up polynomial operations with Finite Field FFT (or NTT, whatever you wanna call it)</li>
<li>Parallelizing vector and elliptic curve operations</li>
</ul>
<p>In this part, we&rsquo;ll discuss only the FFT based optimizations</p>
<h2 id="notation">Notation</h2>
<p>Throughout, we&rsquo;ll assume a constraint system over a finite field $F$.</p>
<p>One constraint in the circuit is represented by 3 vectors $A,B,C \in F^n$. To synthesize a QAP from this constraint system, we interpolate $A, B, C$ on an index by index basis to obtain $A(x), B(x), C(x) \in F[x]^n$.</p>
<p><strong>Each index represents one variable in the circuit</strong>. Therefore, if look at, say, the polynomial at index 0 of $A(x)$, it tells us the coefficient for the variable indexed by 0 in each constraint.</p>
<p>A circuit with n variables and m constraints would therefore synthesize to a QAP of the form (here on referred to as the QAP equation)
$$(w.A(x))*(w.B(x)) - w.C(x) = H(x).Z(x)$$</p>
<p>$$w \in F^n\newline
A(x), B(x), C(x), H(x), Z(x) \in  F[x]^n$$</p>
<p>Let $X = {x_i\ |\ i \in [0, m),\ x_i \in F}$ be a set of points in $F$ chosen for interpolating constraint polynomials. $Z(x)$ is then just $\prod (x-x_i)$</p>
<p>A polynomial $p(x)$ in &ldquo;evaluation domain&rdquo; means we have the evaluation of $p$ at $m$ values of $x$. In most cases when dealing with FFT, those points correspond to the $m^{th}$ roots of unity.</p>
<p>A polynomial $p(x)$ in &ldquo;lagrange basis&rdquo; simply means we&rsquo;re given the vector of its coefficients.</p>
<p>We use FFT to go from lagrange basis to evaluation domain, and iFFT for the inverse in $O(m\log(m ))$ time (as opposed to $O(m^2)$ in the naive approach).</p>
<h2 id="parameter-generation-phase">Parameter generation phase</h2>
<p>SNARKs require a trusted setup. Groth16 in particular is a non-universal proof system, meaning that a separate parameter generation ceremony is required for each circuit.</p>
<p>The polynomial vectors $A(x), B(x), C(x)$ specify the circuit and are therefore public. But in the proving phase, we have to compute $w.T(\tau)$ for $T \in {A, B, C}$. Note that $\tau$ is destroyed after the SRS generation and what we actually have as part of the trusted setup is $G_1A(\tau), G_1B(\tau), G_1C(\tau)$</p>
<p>So it makes sense to store $G_1A(\tau), G_1B(\tau), G_1C(\tau)$ as part of the proving key instead of the entire polynomial vector. This is useful because:</p>
<ol>
<li>It leads to smaller parameters since we only have to store vectors of field elements instead of polynomials</li>
<li>Since $\tau$ is part of the trusted setup (constant), $G_1A(\tau), G_1B(\tau), G_1C(\tau)$ can be precomputed for the proving phase</li>
</ol>
<p>Since we&rsquo;re still int the parameter generation phase, $\tau$ is known. So our task is to compute $A(\tau), B(\tau), C(\tau)$.</p>
<h3 id="evaluation-without-interpolation">Evaluation without interpolation</h3>
<p>Lets address an individual index of $A(x)$. We have $y_i \in F, i \in [0, m)$. And we interpolate these to obtain a polynomial $a_j(x)$ s.t $a_j(x_i) = y_i, x_i \in X$. $a_j$ represents all constraints on the circuit variable indexed j. Since we choose $X$ to be the roots of unity in $F$, interpolation can be done with inverse FFT. Since what we want to calculate is $a(\tau)$, the naive approach would be</p>
<ol>
<li>Gather all $y_i$ and do iFFT to obtain $a(x)$</li>
<li>Evaluate at $\tau$</li>
<li>Repeat for all indices</li>
</ol>
<p>This requires one iFFT operation for each variable in the circuit. Instead we can use a trick to calculate $a_j(\tau)$ without ever interpolating $y_i$.</p>
<p>Calculate $T=iFFT([\tau^0, \tau^1, \tau^2&hellip;\tau^{m-1}])$ = $[t_0, t_1, t_2&hellip;t_{m-1}]$</p>
<p>Then, given $y_i$, $a_j(\tau)$ is simply given by $\sum_{i=0}^{m-1}y_i.t_i$. This lets us compute $A(x)$ with one iFFT (for computing $T$) instead of one for each variable.</p>
<p><strong>Proof:</strong>
Let $a_j = iFFT([y_0, y_1&hellip;y_{m-1}]) = [a_0, a_1, a_2&hellip;a_{m-1}]$</p>
<p>$T=iFFT([\tau^0, \tau^1, \tau^2&hellip;\tau^{m-1}])$ = $[t_0, t_1, t_2&hellip;t_{m-1}]$
We have
$$
a_j(\tau) = a_0.\tau^0 + a_1\tau^1&hellip;a_{m-1}\tau^{m-1},\newline
y_i = a_0(\omega^i)^0 + a_1(\omega^i)^1 &hellip; a_{m-1}(\omega^i)^{m-1},\newline
\tau^i = t_0(\omega^i)^0 + t_1(\omega^i)^1 &hellip; t_{m-1}(\omega^i)^{m-1},
$$</p>
<p>Now,
$$
\sum_{i=0}^{m-1}y_i.t_i = \sum_{i=0}^{m-1}(a_0(\omega^i)^0 + a_1(\omega^i)^1 &hellip; a_{m-1}(\omega^i)^{m-1}).t_i
$$</p>
<p>Refactoring the equation a little bit, we get
$$
\sum_{i=0}^{m-1}y_i.t_i = \sum_{i=0}^{m-1}a_i(t_0(\omega^0)^i + t_1(\omega^1)^i&hellip;t_{m-1}(\omega^{m-1})^i)\newline
= \sum_{i=0}^{m-1}a_i(t_0(\omega^i)^0 + t_1(\omega^i)^1&hellip;t_{m-1}(\omega^i)^{m-1})\newline
= \sum_{i=0}^{m-1}a_i\tau^i = a_j(\tau)\newline
\implies \sum_{i=0}^{m-1}y_i.t_i = a_j(\tau)
$$</p>
<h2 id="proving-phase">Proving phase</h2>
<p>At its core, what a zk SNARK system aims to prove is knowledge of a witness vector $w$ for the above described QAP equation $(w.A(x))*(w.B(x)) - w.C(x) = H(x).Z(x)$</p>
<p>For this we need to compute $H(x)$ which we can get by dividing $(w.A(x))*(w.B(x)) - w.C(x)$ by $Z(x)$. That&rsquo;s 2 polynomial multiplications and one division, pretty standard usecase for FFT&hellip; with one caveat. $Z(x)$ is chosen so as to be 0 over the set $X$ which is our FFT basis. So how do we divide by Z when it&rsquo;s just 0 on all the points in our evaluation domain?</p>
<h3 id="coset-fft">Coset FFT</h3>
<p>We use coset-FFT for division with polynomials that evaluate to zero at one or more of the roots of unity. Which is to say, instead of getting evaluations at $\omega^i$, we get evaluations at $S\omega^i$ where $S \in F$ is a fixed element.</p>
<p>Note: $S$ is typically chosen to be the multiplicative generator of the field, but any high order element would work in theory.</p>
<p>The algorithm is pretty simple. Given a polynomial $p$ in lagrange basis,</p>
<p>$$
p = [a_0, a_1&hellip;a_{m-1}]
$$</p>
<p>The coset FFT is simply</p>
<p>$$
FFT([a_0, a_1S, a_2S^2&hellip;a_{m-1}S^{m-1}])
$$</p>
<p>The explanation is also pretty simple. FFT gives us evaluations of $p$ at roots of unity, i.e $\sum_{i=0}^{m-1}a_i\omega^i$</p>
<p>Now let $b_i = a_iS^i$</p>
<p>Then FFT would give us elements of the form
$$
\sum_{i=0}^{m-1}b_i(\omega^j)^i, j \in [0,m)\newline
= \sum_{i=0}^{m-1}a_iS^i(\omega^j)^i
= \sum_{i=0}^{m-1}a_i(S\omega^j)^i\newline
= p(S\omega^j), j \in [0,m)
$$</p>
<p>To take the inverse of a coset FFT, we just take iFFT and then divide the coefficients with the corresponding powers of $S$.</p>
<p>Additionally:
Now $Z(x)=\prod (x-\omega^i) = x^m - 1$.</p>
<p>Since $(\omega^i)^m = 1 \forall i \in [0,m)$, we don&rsquo;t even need to compute FFT to get the evaluation of $Z(S\omega^i)$ at the roots of unity, since it will have the same value $S^m - 1$ at all the evaluation points.</p>
<p>Now to compute H(x), we first obtain $CosetFFT(w.A(x)*w.B(x) - w.C(x))$</p>
<ol>
<li>The multiplication of A and B is also performed by taking FFT normally followed by iFFT to convert the result back to lagrange basis</li>
<li>We now have the evaluation of $w.A(x)*w.B(x) - w.C(x)$ at the points $S.(\omega^i)$</li>
<li>Divide each of these by $S^m - 1$ (evaluation of Z at all these points)</li>
<li>Take inverse coset FFT as described above</li>
</ol>
<p>We now have H(x) in the lagrange basis</p>
<h2 id="implementations">Implementations</h2>
<p>Here&rsquo;s a sample implementation of coset FFT from my <a href="https://github.com/Scar26/embedded-groth/blob/master/src/poly.rs">groth16 library</a></p>
<pre tabindex="0"><code class="language-rust!" data-lang="rust!">pub fn coset_fft&lt;S: PrimeField&gt;(a: &amp;mut [S], omega: &amp;S, exp: u32) {
    let g = S::multiplicative_generator();
    let mut u = S::one();
    for x in a.iter_mut() {
        x.mul_assign(&amp;u);
        u.mul_assign(&amp;g);
    }
    fft(a, omega, exp)
}

pub fn icoset_fft&lt;S: PrimeField&gt;(a: &amp;mut [S], omega: &amp;S, exp: u32) {
    ifft(a, omega, exp);
    let g = S::multiplicative_generator().invert().unwrap();
    let mut u = S::one();
    for x in a.iter_mut() {
        x.mul_assign(&amp;u);
        u.mul_assign(&amp;g);
    }
}

</code></pre>]]></content></item><item><title>CSAW22 - Attacking a Linear PRNG with LLL</title><link>http://scar26.github.io/posts/csaw22-prng/</link><pubDate>Tue, 15 Nov 2022 18:37:48 +0530</pubDate><guid>http://scar26.github.io/posts/csaw22-prng/</guid><description>This is a writeup of the cryptography task &amp;ldquo;Master of PRNG&amp;rdquo; from the CSAW finals 2022. It had around 6 solves by the end of the CTF.
The first part of this challenge involves generalizing the classic Hidden Number Problem to a case with 2 constants, followed by the usual CVP. The second part additionally involves a simple but subtle observation regarding the public moduli.
The challenge file can be found here: chall.</description><content type="html"><![CDATA[<p>This is a writeup of the cryptography task &ldquo;Master of PRNG&rdquo; from the CSAW finals 2022. It had around 6 solves by the end of the CTF.</p>
<p>The first part of this challenge involves generalizing the classic Hidden Number Problem to a case with 2 constants, followed by the usual CVP. The second part additionally involves a simple but subtle observation regarding the public moduli.</p>
<p>The challenge file can be found here: <a href="/assets/csaw22/csaw22-prng-chall.py">chall.py</a></p>
<h2 id="challenge-summary">Challenge Summary</h2>
<p>Let $n_1, n_2$ be 512 bit prime moduli</p>
<p>$a_1, a_2 \in Z_{n_1}$ and $b_1, b_2 \in Z_{n_2}$ are randomly generated coefficients.</p>
<p>In summary, We have a PRNG scheme seeded with $0 \leq x_0, x_1, y_0, y_1 \leq n_2$ where</p>
<p>$$x_i \equiv a_1x_{i-1} + a_2x_{i-2}\ mod\ n_1$$
$$y_i \equiv b_1y_{i-1} + b_2y_{i-2}\ mod\ n_2$$
$$z_i \equiv x_i - y_i\ mod\ n_1$$</p>
<p>$a_1, a_2, b_1, b_2, n_1, n_2$ are public parameters</p>
<p>We&rsquo;re given $x_i$ &amp;&amp; $2^{307}, z_i$ &raquo; $204$ &laquo; $204\ |\ 2 \leq i \leq 6$ and need to predict $y_7$ for the flag.</p>
<p>Given $x_i$ and $z_i$, the challenge would be trivial since we could easily recover $y_i\ 2 \leq i \leq 6$ and use it to predict $y_7$. The problem is, the upper 204 bits for x and lower 204 bits for z have been masked out.</p>
<p>Essentially, we&rsquo;re missing the upper ~204 bits for $x_i$ and the lower ~204 bits for $z_i$ ($x_i, z_i$ ~ 512 bits so we&rsquo;re missing around 40% of the bits)</p>
<h2 id="solution">Solution</h2>
<p>Examining, the equations for $x_i$</p>
<p>For $2 \leq i \leq 6$, we have,
$$x_i \equiv a1_ix_{1} + a2_ix_{0}\ mod\ n_1$$
Where $a1_i, a2_i$ can be computed from $a_{1}, a_{2}$</p>
<p>For example,
$$x_2 \equiv a_1x_{1} + a_2x_{0}\ mod\ n_1$$
$$x_3 \equiv a_1x_{2} + a_2x_{1} = (a_1^2 + a_2)x_1 + a_1a_2x_0 \ mod\ n_1$$</p>
<p>This can be re-written as
$$2^{307}ux_i + lx_i \equiv a1_ix_{1} + a2_ix_{0}\ mod\ n_1$$
Where $lx_i$ are the lower 307 bits (known) and $ux_i$ are the remaining upper bits (unknown)</p>
<p>Multiplying by $2^{-307}$, we end up with an equation of the form</p>
<p>$$ux_i + c_i \equiv a1_ix_{1} + a2_ix_{0}\ mod\ n_1$$</p>
<p>We have 5 such equations and wish to recover $ux_{i}$, where $ux_{i}$ is relatively small (0.4 * the bitlength of $n_1$).</p>
<p>On a closer look, this looks really similar to the Hidden Number Problem, used in biased nonce attacks against Elliptic Curves. In HNP, we have a set of m equations</p>
<p>$$x_i + a_i \equiv t_iy\ mod\ p\ 0 \leq i \leq m$$ where y is an unknown constant and the $x_i$, which we wish to recover are small. The difference is that we have 2 constants ($x_0, x_1$) instead of a single y. To extend HNP to our case, we must understand the intuition behind how it&rsquo;s reduced to lattice CVP.</p>
<p>Let <strong>X</strong> be the vector of $x_i$</p>
<p><strong>A</strong> be the vector of $a_i$</p>
<p><strong>T</strong> be the vector of $t_i$</p>
<p><strong>$P_i$</strong> be a vector with p in the ith index and 0 everywhere else</p>
<p>Our set of equations can be represented in vector form as</p>
<p><strong>X</strong> + <strong>A</strong> = <strong>T</strong>*y - $\sum_{i\ =\ 0}^{n} k_{i}$$P_{i}$</p>
<p>Since y and $k_i$ are all integers, <strong>X</strong> + <strong>A</strong> lies in the lattice $L$ spanned by the basis (<strong>T</strong>, <strong>$P_0$</strong>, <strong>$P_1$</strong> &hellip; <strong>$P_n$</strong>)</p>
<p>Since <strong>X</strong> is small, if we look for the vector in $L$ closest to <strong>A</strong>, we can recover <strong>X</strong> with high probability. There are certain limitations (check minkowski&rsquo;s theorem) but intuitively, this is how it works. Extrapolating from this to our equations</p>
<p>$$ux_i + c_i \equiv a1_ix_{1} + a2_ix_{0}\ mod\ n_1\ = a1_ix_{1} + a2_ix_{0} - k_in_1$$</p>
<p><strong>X</strong> + <strong>C</strong> = <strong>A1</strong>$x_1$ + <strong>A2</strong>$x_0$ - $\sum_{i\ =\ 0}^{n} k_{i}$$P_{i}$</p>
<p>Where
<strong>X</strong> is the vector of $ux_i$
<strong>C</strong> is the vector of $c_i$
<strong>A1</strong> is the vector of $a1_i$
<strong>A2</strong> is the vector of $a2_i$</p>
<p>so <strong>X</strong> + <strong>C</strong> lies in the lattice
$$L\ =\ \left[\begin{matrix}
n_1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \newline
0 &amp; n_1 &amp; 0 &amp; 0 &amp; 0 \newline
0 &amp; 0 &amp; n_1 &amp; 0 &amp; 0 \newline
0 &amp; 0 &amp; 0 &amp; n_1 &amp; 0 \newline
0 &amp; 0 &amp; 0 &amp; 0 &amp; n_1 \newline
a1_{2} &amp; a1_{3} &amp; a1_{4} &amp; a1_{5} &amp; a1_{6}\newline
a2_{2} &amp; a2_{3} &amp; a2_{4} &amp; a2_{5} &amp; a2_{6}
\end{matrix}\right]$$</p>
<p>Thus, $$X\ =\ CVP(L, C) - C$$</p>
<p>GG, we have successfully recovered all $x_i$.
Here&rsquo;s the sage code I wrote for this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve_cvp</span>(B, t):
    t_ <span style="color:#f92672">=</span> t <span style="color:#f92672">-</span> B<span style="color:#f92672">.</span>stack(t)<span style="color:#f92672">.</span>gram_schmidt()[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>row(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
    B_ <span style="color:#f92672">=</span> B<span style="color:#f92672">.</span>LLL()
    c <span style="color:#f92672">=</span> B_<span style="color:#f92672">.</span>solve_left(t_)
    c_ <span style="color:#f92672">=</span> vector(map(round, c))
    <span style="color:#66d9ef">return</span> c_ <span style="color:#f92672">*</span> B_

coeffsx <span style="color:#f92672">=</span> [(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>), (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>)]

<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
    coeffsx<span style="color:#f92672">.</span>append((coeffsx[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>a_1 <span style="color:#f92672">+</span> coeffsx[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>a_2, coeffsx[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>a_1 <span style="color:#f92672">+</span> coeffsx[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>a_2))

coeffsx <span style="color:#f92672">=</span> coeffsx[<span style="color:#ae81ff">2</span>:]

mat <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span> <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">7</span>)]
v <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span>

sf <span style="color:#f92672">=</span>  (<span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">307</span>)
si <span style="color:#f92672">=</span> Integer(Mod(sf, n1)<span style="color:#f92672">^-</span><span style="color:#ae81ff">1</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
    mat[i][i] <span style="color:#f92672">=</span> n1
    mat[<span style="color:#ae81ff">5</span>][i] <span style="color:#f92672">=</span> si<span style="color:#f92672">*</span>coeffsx[i][<span style="color:#ae81ff">0</span>]
    mat[<span style="color:#ae81ff">6</span>][i] <span style="color:#f92672">=</span> si<span style="color:#f92672">*</span>coeffsx[i][<span style="color:#ae81ff">1</span>]
    v[i] <span style="color:#f92672">=</span> si<span style="color:#f92672">*</span>ret_xs[i]

mat <span style="color:#f92672">=</span> Matrix(ZZ, mat)
v <span style="color:#f92672">=</span> vector(ZZ, v)
t <span style="color:#f92672">=</span> solve_cvp(mat, v)

x2 <span style="color:#f92672">=</span> (sf<span style="color:#f92672">*</span>(t<span style="color:#f92672">-</span>v)[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> ret_xs[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">%</span>n1
x3 <span style="color:#f92672">=</span> (sf<span style="color:#f92672">*</span>(t<span style="color:#f92672">-</span>v)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> ret_xs[<span style="color:#ae81ff">1</span>])<span style="color:#f92672">%</span>n1

x_state <span style="color:#f92672">=</span> [x2, x3]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>):
    x_state<span style="color:#f92672">.</span>append((a_1<span style="color:#f92672">*</span>x_state[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> a_2<span style="color:#f92672">*</span>x_state[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>])<span style="color:#f92672">%</span>n1)
</code></pre></div><p>Now for $z_i$, rewriting the equation for $y_i$ in as similar way as $x_i$, we get</p>
<p>$$z_i \equiv x_i - y_i\ mod\ n_1$$
$$uz_i + lz_i \equiv x_i - (b1_iy_1 + b2_iy_0\ mod\ n_2)\ mod\ n_1$$
$$uz_i + lz_i = x_i - (b1_iy_1 + b2_iy_0\ - k1_in_2)\ - k2_in_1$$</p>
<p>We now know $x_i$ and wish to recover $lz_i$, but the double mod poses a problem. We can&rsquo;t have both $n_1$ and $n_2$ in the lattice basis as they are coprime and would just cancel out any other values, giving a rank 0 basis.</p>
<p>I was stuck on this part for a while. One of the things I noticed was $n_2 &lt; n_1$, meaning $y_0\ mod\ n_1 = y_0, y_1\ mod\ n_1 = y_1$. So I spent a lot of time trying to homogenize the entire equation to $Z_(n_1n_2)$ with CRT but it didn&rsquo;t work out. Then I got hit with the stupidly simple observation that had been staring me in the face in the entire time.</p>
<p>Given $n_1 &gt; n_2$,
$$x_i = O(n_1), y_i ~ O(n_2) \implies x_i - y_i = O(n_1)$$
Meaning $k2_i$ is small! Infact, practically, $k2_i \in {-1, 0, 1}$</p>
<p>Let&rsquo;s say we know the values for all $k2_i$ (since we can just bruteforce the $3^5$ possibilities), we end up with the system of equations</p>
<p>$$b1_iy_1 + b2_iy_0 - k1_in_2 = c_i - lz_i$$
where $c_i = x_i - k2_in_1 - uz_i$</p>
<p>So $C - LZ$ lies in the lattice</p>
<p>$$L\ =\ \left[\begin{matrix}
n_2 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \newline
0 &amp; n_2 &amp; 0 &amp; 0 &amp; 0 \newline
0 &amp; 0 &amp; n_2 &amp; 0 &amp; 0 \newline
0 &amp; 0 &amp; 0 &amp; n_2 &amp; 0 \newline
0 &amp; 0 &amp; 0 &amp; 0 &amp; n_2 \newline
b1_{2} &amp; b1_{3} &amp; b1_{4} &amp; b1_{5} &amp; b1_{6}\newline
b2_{2} &amp; b2_{3} &amp; b2_{4} &amp; b2_{5} &amp; b2_{6}
\end{matrix}\right]$$</p>
<p>$$V = \left[c_2 - lz_2\ c_3 - lz_3\ c_4 - lz_4\ c_5 - lz_5\ c_6 - lz_6\ \right]^T \in L$$
$$C - V = LZ$$</p>
<p>Since LZ is small, we have</p>
<p>$$LZ = C - CVP(L, V)$$</p>
<p>Iterating over all $3^5$ possibilities of C (by varying $k2_i \in {-1, 0, 1}$) we can identify the correct <strong>LZ</strong> as the one where
all values have the expected bitlength (~205)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">xv <span style="color:#f92672">=</span> vector(ZZ, x_state)

mat <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span> <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">7</span>)]
v <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
    mat[i][i] <span style="color:#f92672">=</span> n2
    mat[<span style="color:#ae81ff">5</span>][i] <span style="color:#f92672">=</span> coeffsy[i][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">%</span>n2
    mat[<span style="color:#ae81ff">6</span>][i] <span style="color:#f92672">=</span> coeffsy[i][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">%</span>n2

mat <span style="color:#f92672">=</span> Matrix(ZZ, mat)

z <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]
dels <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: vector(ZZ, list(x)), list(itertools<span style="color:#f92672">.</span>product(z, repeat<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>))))

<span style="color:#66d9ef">for</span> d <span style="color:#f92672">in</span> dels:
    v <span style="color:#f92672">=</span> xv <span style="color:#f92672">-</span> vector(ZZ, ret_zs) <span style="color:#f92672">-</span> d<span style="color:#f92672">*</span>n1
    t <span style="color:#f92672">=</span> solve_cvp(mat, v)
    <span style="color:#66d9ef">if</span> max(v <span style="color:#f92672">-</span> t)<span style="color:#f92672">.</span>nbits() <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">250</span>:
        y_state <span style="color:#f92672">=</span> list(t)
        k <span style="color:#f92672">=</span> (b_1<span style="color:#f92672">*</span>y_state[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> b_2<span style="color:#f92672">*</span>y_state[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>])<span style="color:#f92672">%</span>n2
        print (<span style="color:#e6db74">&#34;y_7 = &#34;</span>, k)
        <span style="color:#66d9ef">break</span>
</code></pre></div><p><code>flag{_w0w_y0u_@r3_s0_g00d_@_L4t7ice_}</code></p>
<h2 id="complete-code">Complete Code</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> long_to_bytes, bytes_to_long
<span style="color:#f92672">from</span> sage.modules.free_module_integer <span style="color:#f92672">import</span> IntegerLattice
<span style="color:#f92672">import</span> itertools

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve_cvp</span>(mat, target):
	M <span style="color:#f92672">=</span> IntegerLattice(mat, lll_reduce<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">.</span>reduced_basis
	G <span style="color:#f92672">=</span> M<span style="color:#f92672">.</span>gram_schmidt()[<span style="color:#ae81ff">0</span>]
	diff <span style="color:#f92672">=</span> target
	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> reversed(range(G<span style="color:#f92672">.</span>nrows())):
		diff <span style="color:#f92672">-=</span>  M[i] <span style="color:#f92672">*</span> ((diff <span style="color:#f92672">*</span> G[i]) <span style="color:#f92672">/</span> (G[i] <span style="color:#f92672">*</span> G[i]))<span style="color:#f92672">.</span>round()
	<span style="color:#66d9ef">return</span> target <span style="color:#f92672">-</span> diff

module_bit <span style="color:#f92672">=</span> <span style="color:#ae81ff">512</span>
beta <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.6</span>
a_1,a_2 <span style="color:#f92672">=</span>  [<span style="color:#ae81ff">9919754465736816172569173052425931289517829891854342593290927744542118133847348662406222547572947297178727236300405992491684375909305177189047780739423811</span>, <span style="color:#ae81ff">2558159371069956421749072997341298610563190398496109008773995596731281585562821740934514052081914548707643961639133075782257512937408016925625816701379184</span>]
b_1,b_2 <span style="color:#f92672">=</span>  [<span style="color:#ae81ff">2605193676009044327751542404995552395651364785430784591434496675113980641629822868464738894812540539614357309531957125239722030117295601326651054134997855</span>, <span style="color:#ae81ff">3197045230062951998763856325415663842943082118997359612045648551897230423045976716318651375603679498159844171771317291574116847000481449039959441081514627</span>]
n1 <span style="color:#f92672">=</span>  <span style="color:#ae81ff">11681289596798868397030596649789726767285990000843272211957420810019522067387532211264897471096909399295930769738569665286430964000906934541163352714344519</span>
n2 <span style="color:#f92672">=</span>  <span style="color:#ae81ff">10557965421921341302784057525127038885537939006621468287750526343357317493360177624286054901157989185048184920439519551848192429179141349006037985539214071</span>
ret_xs <span style="color:#f92672">=</span>  [<span style="color:#ae81ff">258466590698311071331247037930868824798600351331801120333006455557946900924072178631112955877</span>, <span style="color:#ae81ff">9821442718613283840479818314015332171481079398147839951441986495105073061641539763228587316</span>, <span style="color:#ae81ff">44840961768274714901326962447354283020302651991130253647924461474246517162698016799008370900</span>, <span style="color:#ae81ff">4181026132314144744475531197443398345060712084263169112302700944672100108051705214872237804</span>, <span style="color:#ae81ff">165146543464042899162832236414189105534540273973129205248892886798269176015886688299461120067</span>]
ret_zs <span style="color:#f92672">=</span>  [<span style="color:#ae81ff">11425495409956732054927782736077190158254288269207497569801502736793464884202670506015379318738941018498330797528225268357863433326525610294847934650384384</span>, <span style="color:#ae81ff">6493331726937754866196531134748756985061780536063848814074103775547995272554729994318400024248625477632819500830464284078877134996898279637865644465061888</span>, <span style="color:#ae81ff">993089766452002806192286220960438231942075399393023941745370499613681022868865277955412695258671518735133398965459541404411563617841529593232577007714304</span>, <span style="color:#ae81ff">9947918164778455706315062500056819613968192691484842758450452417155875586535345223342626196771965216296162822961357707526761812463743778564968870859243520</span>, <span style="color:#ae81ff">6798568953150532649740005658966557905457680624368167498216858785007123058363282156005182480229608829437870473084370507240870801760529936705635869020651520</span>]      
encflag <span style="color:#f92672">=</span>  <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x84\x0b</span><span style="color:#e6db74">k</span><span style="color:#ae81ff">\xfb</span><span style="color:#e6db74">mp</span><span style="color:#ae81ff">\x1a</span><span style="color:#e6db74">V</span><span style="color:#ae81ff">\x95</span><span style="color:#e6db74">q</span><span style="color:#ae81ff">\r\x9b</span><span style="color:#e6db74">Z/s</span><span style="color:#ae81ff">\xe5\xb4\xa5</span><span style="color:#e6db74">Y~y</span><span style="color:#ae81ff">\xac\xaa\xd1\xff\xf1\xf1\xee</span><span style="color:#e6db74">#</span><span style="color:#ae81ff">\xbd\x07</span><span style="color:#e6db74">:n</span><span style="color:#ae81ff">\x9c\xd6\xcd</span><span style="color:#e6db74">V*</span><span style="color:#ae81ff">\xfc\xbe</span><span style="color:#e6db74">0</span><span style="color:#ae81ff">\x96\xff\xff\xa1</span><span style="color:#e6db74">E</span><span style="color:#ae81ff">\xdd\xb3\x96\xa2\xb2\x8c</span><span style="color:#e6db74">W</span><span style="color:#ae81ff">\xc2</span><span style="color:#e6db74">#6Y</span><span style="color:#ae81ff">\xa0\xf2\xd7\xb7</span><span style="color:#e6db74">*</span><span style="color:#ae81ff">\xbb\xfb</span><span style="color:#e6db74">&#39;</span>
ct <span style="color:#f92672">=</span> bytes_to_long(encflag)

coeffsx <span style="color:#f92672">=</span> [(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>), (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>)]
coeffsy <span style="color:#f92672">=</span> [(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>), (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>)]

<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
    coeffsx<span style="color:#f92672">.</span>append((coeffsx[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>a_1 <span style="color:#f92672">+</span> coeffsx[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>a_2, coeffsx[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>a_1 <span style="color:#f92672">+</span> coeffsx[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>a_2))
    coeffsy<span style="color:#f92672">.</span>append((coeffsy[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>b_1 <span style="color:#f92672">+</span> coeffsy[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>b_2, coeffsy[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>b_1 <span style="color:#f92672">+</span> coeffsy[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>b_2))

coeffsx <span style="color:#f92672">=</span> coeffsx[<span style="color:#ae81ff">2</span>:]
coeffsy <span style="color:#f92672">=</span> coeffsy[<span style="color:#ae81ff">2</span>:]

mat <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span> <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">7</span>)]
v <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span>

sf <span style="color:#f92672">=</span>  (<span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> int(module_bit <span style="color:#f92672">*</span> beta))
si <span style="color:#f92672">=</span> Integer(Mod(sf, n1)<span style="color:#f92672">^-</span><span style="color:#ae81ff">1</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
    mat[i][i] <span style="color:#f92672">=</span> n1
    mat[<span style="color:#ae81ff">5</span>][i] <span style="color:#f92672">=</span> si<span style="color:#f92672">*</span>coeffsx[i][<span style="color:#ae81ff">0</span>]
    mat[<span style="color:#ae81ff">6</span>][i] <span style="color:#f92672">=</span> si<span style="color:#f92672">*</span>coeffsx[i][<span style="color:#ae81ff">1</span>]
    v[i] <span style="color:#f92672">=</span> si<span style="color:#f92672">*</span>ret_xs[i]

mat <span style="color:#f92672">=</span> Matrix(ZZ, mat)
v <span style="color:#f92672">=</span> vector(ZZ, v)
t <span style="color:#f92672">=</span> solve_cvp(mat, v)

x2 <span style="color:#f92672">=</span> (sf<span style="color:#f92672">*</span>(t<span style="color:#f92672">-</span>v)[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> ret_xs[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">%</span>n1
x3 <span style="color:#f92672">=</span> (sf<span style="color:#f92672">*</span>(t<span style="color:#f92672">-</span>v)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> ret_xs[<span style="color:#ae81ff">1</span>])<span style="color:#f92672">%</span>n1

x_state <span style="color:#f92672">=</span> [x2, x3]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>):
    x_state<span style="color:#f92672">.</span>append((a_1<span style="color:#f92672">*</span>x_state[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> a_2<span style="color:#f92672">*</span>x_state[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>])<span style="color:#f92672">%</span>n1)
    
xv <span style="color:#f92672">=</span> vector(ZZ, x_state)

mat <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span> <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">7</span>)]
v <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
    mat[i][i] <span style="color:#f92672">=</span> n2
    mat[<span style="color:#ae81ff">5</span>][i] <span style="color:#f92672">=</span> coeffsy[i][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">%</span>n2
    mat[<span style="color:#ae81ff">6</span>][i] <span style="color:#f92672">=</span> coeffsy[i][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">%</span>n2

mat <span style="color:#f92672">=</span> Matrix(ZZ, mat)

z <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]
dels <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: vector(ZZ, list(x)), list(itertools<span style="color:#f92672">.</span>product(z, repeat<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>))))

<span style="color:#66d9ef">for</span> d <span style="color:#f92672">in</span> dels:
    v <span style="color:#f92672">=</span> xv <span style="color:#f92672">-</span> vector(ZZ, ret_zs) <span style="color:#f92672">-</span> d<span style="color:#f92672">*</span>n1
    t <span style="color:#f92672">=</span> solve_cvp(mat, v)
    <span style="color:#66d9ef">if</span> max(v <span style="color:#f92672">-</span> t)<span style="color:#f92672">.</span>nbits() <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">250</span>:
        y_state <span style="color:#f92672">=</span> list(t)
        k <span style="color:#f92672">=</span> (b_1<span style="color:#f92672">*</span>y_state[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> b_2<span style="color:#f92672">*</span>y_state[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>])<span style="color:#f92672">%</span>n2
        print (long_to_bytes(ct<span style="color:#f92672">^^</span>k))
        <span style="color:#66d9ef">break</span>
</code></pre></div>]]></content></item><item><title>Backdooring Kyber: NIST PQ finalist</title><link>http://scar26.github.io/posts/kyber21/</link><pubDate>Tue, 11 Jan 2022 18:37:48 +0530</pubDate><guid>http://scar26.github.io/posts/kyber21/</guid><description>This is an author writeup for the cryptography challenge &amp;ldquo;Beyond the mountain&amp;rdquo; that I created for Backdoor CTF 2021-22. It was based on a backdoor that I came up with for a slightly reduced version of kyber. The backdoor allows us to create &amp;ldquo;controlled decryption failures&amp;rdquo; in polynomial time.
What I personally found interesting in this challenge while creating it was that the attack is based on a technique I personally have yet to see used in any academic work but is very popular in the cryptography CTF community.</description><content type="html"><![CDATA[<p>This is an author writeup for the cryptography challenge &ldquo;Beyond the mountain&rdquo; that I created for Backdoor CTF 2021-22. It was based on a backdoor that I came up with for a slightly reduced version of <a href="https://ieeexplore.ieee.org/abstract/document/8406610">kyber</a>. The backdoor allows us to create &ldquo;controlled decryption failures&rdquo; in polynomial time.</p>
<p>What I personally found interesting in this challenge while creating it was that the attack is based on a technique I personally have yet to see used in any academic work but is very popular in the cryptography CTF community. That technique being, RKM&rsquo;s legendary <a href="https://github.com/rkm0959/Inequality_Solving_with_CVP">Inequality solving with CVP</a> repo. Though I did have to extend the logic from RKM&rsquo;s repo to get this attack working, the basic intuition is the same</p>
<p>I&rsquo;ll begin with an introduction of the Kyber Cryptosystem, followed by the challenge and finally the attack.</p>
<h2 id="notation">Notation</h2>
<p>$Z_q$ represents the ring of integers mod q. I&rsquo;ll be using the $[-\frac{q}{2}, \frac{q}{2}]$ representation because it&rsquo;s more intuitive for some encoding stuff easier as you&rsquo;ll see later. This is gonna be kind of important so make sure you understand it well</p>
<p>$R_q = Z_q[X]/(X^N + 1)$ for N some power of 2. The ring of $l_1 \times l_2$ matrices over $R_q$ is written as $R_q^{l_1 \times l_2}$.</p>
<p>Elements of $R_q$ are written as polynomials in the indeterminate $u$</p>
<p>For $x \in Z_q^n$, $||x||_2$ denotes the $l_2$ norm of $x$. For $x \in R_q$,  $||x||_2$ denotes the $l_2$ norm of $x$ considered as a vector of its coefficients</p>
<p>Similarly $x_{\infty} = max({|x_i|\ | x_i \in x})$ denotes the $l_{\infty}$ norm of x.</p>
<p>$U(S)$ denotes the uniformly random distribution over the set $S$.
$\chi(S)$ represents a small binomial distribution centered around 0 (well, technically it has to be a Poset but that&rsquo;s a given for the rings we&rsquo;re working with). The exact distribution doesn&rsquo;t really matter for intuition, just think of it as as a small distribution centered around 0</p>
<h2 id="background">Background</h2>
<p>CRYSTALS-Kyber is a Module LWE based PKE scheme that, at the time of writing, is one of finalist candidates in the NIST Post Quantum competition.</p>
<h3 id="mod-lwe">Mod LWE</h3>
<p>The LWE (Learning with Errors) problem is an extension of the LPN (Learning Parity with Noise) problem and is described as follows.</p>
<p>For a random secret vector $s \in Z_q^n$, the adversary is given an aribitrary number of samples of the form
$$(a, a^Ts + e) \in Z_q^n \times Z_q$$ $$a \leftarrow U(Z_q^n), e \leftarrow \chi(Z_q)$$</p>
<p>The LWE problem is then to obtain $s$ from the given samples. Under the LWE assumption, this problem assumed to be hard.</p>
<p>For <strong>Ring LWE</strong>, $Z_q$ is replaced with $R_q$. So $a, s, e \in R_q$ and the samples are of the form
$$(a, a.s + e) \in R_q \times R_q$$</p>
<p>Finally, for <strong>Module LWE</strong>, $s, a \in R_q^{l \times 1}$, i.e a module of $R_q$ leading to samples of the form
$$(a, a^Ts + e) \in R_q^{l \times 1} \times R_q$$</p>
<h2 id="kyber">Kyber</h2>
<p>As standard for PKEs, Kyber is described by the triplet of functions
$$KeyGen()\newline
Enc(pk = (\textbf{t}, \rho), m)\newline
Dec(sk=\textbf{s}, ct = (u, v))$$</p>
<h3 id="key-generation">Key Generation</h3>
<p>$s, e \leftarrow \chi(R_q^{l \times 1})$</p>
<p>Start by selecting some random bits (256 bits in the kyber spec) $\rho$. And using it as a randomness seed to generate a matrix $A \in R_q^{l \times l} = genA(\rho)$</p>
<p>$t = A \times s + e$</p>
<p>Output $s$ as private key and $b$ as public key</p>
<p>Sage implementation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">//</span> mimic a small centered binomial distribution
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">small_poly</span>():
    <span style="color:#66d9ef">return</span> Rq([randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N)])

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">genA</span>(base_ring, r, l):
    random<span style="color:#f92672">.</span>seed(r)
    A <span style="color:#f92672">=</span> Matrix(
        base_ring, 
        [
            [
                base_ring([Integer(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
                <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N)]) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)
            ]
            <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)
        ]
    )
    <span style="color:#66d9ef">return</span> A
    
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">keygen</span>():
    <span style="color:#66d9ef">global</span> l
    r <span style="color:#f92672">=</span> Integer(random<span style="color:#f92672">.</span>getrandbits(N))
    A <span style="color:#f92672">=</span> genA(Rq, r, l)
    s <span style="color:#f92672">=</span> vector(Rq, [small_poly() <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)])
    e <span style="color:#f92672">=</span> vector(Rq, [small_poly() <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)])
    t <span style="color:#f92672">=</span> A<span style="color:#f92672">*</span>s <span style="color:#f92672">+</span> e

    <span style="color:#66d9ef">return</span> (t, r), (s, e)
</code></pre></div><h3 id="encryption">Encryption</h3>
<p>Input: m = plaintext, pk = ($t = genA(\rho)*s + e, \rho$)</p>
<p><strong>Important</strong>: Bitlength of m &lt;= N</p>
<p>$$(s', e', e'') \leftarrow \chi(R_q^{l \times 1} \times R_q^{l \times 1} \times R_q)$$</p>
<p>$$A = genA(\rho)\newline
u = A^Ts' + e' \in R_q^{l \times 1}\newline
v = t^Ts' + e'' + \frac{q}{2}m \in R_q$$</p>
<p>Wait! Wasn&rsquo;t m supposed to be plaintext? Why, yes it was. We first need to encode it to $R_q$.</p>
<p>To do this, construct a polynomial by using the ith least significant bit of m as the coefficient for $u^i$. Then we multiply this polynomial by $\frac{q}{2}$. So the resulting encoding is a element of $R_q$ with coefficients in only ${0, \frac{q}{2}}$.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(m):
        m <span style="color:#f92672">=</span> list(map(int, bin(m)[<span style="color:#ae81ff">2</span>:][::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
        m <span style="color:#f92672">=</span> Rq(m)
        <span style="color:#66d9ef">return</span> m<span style="color:#f92672">*</span>q<span style="color:#f92672">//</span><span style="color:#ae81ff">2</span>
</code></pre></div><p>We then output the Ciphertext $$(u, v)$$</p>
<p>The complete Encryption Routine looks like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(pk, m, r, e1):
    t, rh <span style="color:#f92672">=</span> pk
    t <span style="color:#f92672">=</span> vector(Rq, t)
    A <span style="color:#f92672">=</span> genA(Rq, rh, l)
    m <span style="color:#f92672">=</span> list(map(int, bin(m)[<span style="color:#ae81ff">2</span>:][::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
    m <span style="color:#f92672">=</span> Rq(m)
    e2 <span style="color:#f92672">=</span> small_poly()
    u <span style="color:#f92672">=</span> A<span style="color:#f92672">.</span>transpose()<span style="color:#f92672">*</span>r <span style="color:#f92672">+</span> e1
    v <span style="color:#f92672">=</span> t<span style="color:#f92672">*</span>r <span style="color:#f92672">+</span> e2 <span style="color:#f92672">+</span> (q<span style="color:#f92672">//</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">*</span>m
    <span style="color:#66d9ef">return</span> (u, v)
</code></pre></div><p>r and e1 are $s'$ and $e'$ that we accept as user input</p>
<p>Except this is not the complete Kyber encryption routine. In the real Kyber, we have</p>
<p>$$u = Compress_q(A^Ts' + e')\newline
v =  Compress_q(t^Ts' + e'' + \frac{q}{2}m)$$</p>
<p>Kyber uses 2 special functions Compress and Decompress. Compress maps $x \in Z_q$ to an integer $y \in {0&hellip;2^d - 1}$ for some $d &lt; \log_2(q)$. Decompress does the opposite (duh), but obviously there&rsquo;s some deterministic error introduced by the compression. i.e For $x \in Z_q$,
$$r = x - Decompress_q(Compress_q(x))$$</p>
<p>has a small non-zero distribution. In the challenge, I actually dropped these 2 routines. Reason: though the attack can probably be adjusted (might investigate further at some point) to work with the compression error, it does complicate things and I couldn&rsquo;t figure it out in time.</p>
<h3 id="decryption">Decryption</h3>
<p>Input sk = s, ct = (u, v)</p>
<p>For decryption, we just compute $decode(round(v - s^Tu))$</p>
<p>Let&rsquo;s open up the equation</p>
<p>$$
v - s^Tu\newline
= t^Ts' + e'' + \frac{q}{2}m - s^T(A^Ts' + e')\newline
= (As + e)^Ts' + e'' + \frac{q}{2}m - s^T(A^Ts' + e')\newline
= s^TA^Ts' + e^Ts' + e'' + \frac{q}{2}m - s^TA^Ts' - s^Te'\newline
= \frac{q}{2}m + (e^Ts' + e'' - s^Te')
$$</p>
<p>Let $r = e^Ts' + e'' - s^Te'$</p>
<p>$r$ consists entirely of $R_q$ elements derived from &ldquo;small&rdquo; distributions.  So we can &ldquo;round&rdquo; $c = \frac{q}{2}m + r$ to get m. This is done as follows:</p>
<p>Let&rsquo;s write c as $c = \sum_{i=0}^{N-1}c_iu^i$. The contribution of $r$ to $c_i$ is small.</p>
<p>Hence if $c_i \in (-\frac{q}{4}, \frac{q}{4})$ (which can be written as $(0, \frac{q}{4}) \cup (\frac{3q}{4}, q)$), $b_i = 0$. Otherwise $b_i$ = 1.</p>
<p>Where $b_i$ is the ith bit of m.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(base_ring, v):
    v <span style="color:#f92672">=</span> list(v)<span style="color:#f92672">.</span>copy()
    <span style="color:#66d9ef">for</span> i, p <span style="color:#f92672">in</span> enumerate(v):
        coefs <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>list()
        <span style="color:#66d9ef">for</span> j, a <span style="color:#f92672">in</span> enumerate(coefs):
            coefs[j] <span style="color:#f92672">=</span> round((<span style="color:#ae81ff">2</span><span style="color:#f92672">/</span>q)<span style="color:#f92672">*</span>Integer(a))<span style="color:#f92672">%</span><span style="color:#ae81ff">2</span>
        v[i] <span style="color:#f92672">=</span> base_ring(coefs)
    <span style="color:#66d9ef">return</span> v
    
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(sk, ct):
    u, v <span style="color:#f92672">=</span> ct
    m <span style="color:#f92672">=</span> decode(Rq, [v <span style="color:#f92672">-</span> sk<span style="color:#f92672">*</span>u])[<span style="color:#ae81ff">0</span>]
    m <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>list()[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
    <span style="color:#66d9ef">return</span> int(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(map(str, m)), <span style="color:#ae81ff">2</span>)
</code></pre></div><h2 id="challenge">Challenge</h2>
<p>Here&rsquo;s the complete challenge source</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> random

q <span style="color:#f92672">=</span> <span style="color:#ae81ff">3329</span>
R <span style="color:#f92672">=</span> Zmod(q)
N <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>
l <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
d <span style="color:#f92672">=</span> <span style="color:#ae81ff">11</span>
Rx<span style="color:#f92672">.&lt;</span>x<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> PolynomialRing(R)
Rq<span style="color:#f92672">.&lt;</span>u<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> Rx<span style="color:#f92672">.</span>quotient(x<span style="color:#f92672">^</span>N <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)

flag <span style="color:#f92672">=</span>  open(<span style="color:#e6db74">&#34;flag.txt&#34;</span>)<span style="color:#f92672">.</span>read()

<span style="color:#75715e"># My not so secret keys</span>
<span style="color:#75715e"># Static keys so you can precompute part of the solution to spare our poor VPS some load</span>
t <span style="color:#f92672">=</span> vector(Rq, [<span style="color:#ae81ff">3299</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3045</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2395</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">742</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2092</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">22</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2323</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">506</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2532</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1565</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">704</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">355</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1766</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1307</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1148</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1194</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2260</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1999</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1188</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">731</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">68</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">847</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2090</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2514</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3252</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">997</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2271</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">731</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1937</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">2574</span>, <span style="color:#ae81ff">2383</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3121</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">963</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1495</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2776</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2541</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2516</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2667</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2772</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">114</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1762</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">366</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1343</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2521</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1678</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3224</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">510</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1594</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3020</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3145</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1114</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1823</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1081</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1737</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2821</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2202</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2355</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2238</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">745</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">266</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">887</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">2731</span>])
rh <span style="color:#f92672">=</span> <span style="color:#ae81ff">3428567257</span>
s <span style="color:#f92672">=</span> vector(Rq, [<span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>])
e <span style="color:#f92672">=</span> vector(Rq, [<span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3326</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3328</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3327</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3326</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3327</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3328</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3327</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3327</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3326</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3328</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3328</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span>, <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span>])

pk <span style="color:#f92672">=</span> (t, rh)
sk <span style="color:#f92672">=</span> (s, e)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">genA</span>(base_ring, r, l):
    random<span style="color:#f92672">.</span>seed(r)
    A <span style="color:#f92672">=</span> Matrix(
        base_ring, 
        [
            [
                base_ring([Integer(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
                <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N)]) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)
            ]
            <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)
        ]
    )
    <span style="color:#66d9ef">return</span> A

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(base_ring, v):
    v <span style="color:#f92672">=</span> list(v)<span style="color:#f92672">.</span>copy()
    <span style="color:#66d9ef">for</span> i, p <span style="color:#f92672">in</span> enumerate(v):
        coefs <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>list()
        <span style="color:#66d9ef">for</span> j, a <span style="color:#f92672">in</span> enumerate(coefs):
            coefs[j] <span style="color:#f92672">=</span> round((<span style="color:#ae81ff">2</span><span style="color:#f92672">/</span>q)<span style="color:#f92672">*</span>Integer(a))<span style="color:#f92672">%</span><span style="color:#ae81ff">2</span>
        v[i] <span style="color:#f92672">=</span> base_ring(coefs)
    <span style="color:#66d9ef">return</span> v

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">small_secret</span>():
    <span style="color:#66d9ef">return</span> Rq([randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N)])

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">small_error</span>():
    <span style="color:#66d9ef">return</span> Rq([randint(<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N)])

<span style="color:#75715e"># In case you plebs think testing it locally will make it any easier</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">keygen</span>():
    <span style="color:#66d9ef">global</span> l
    r <span style="color:#f92672">=</span> Integer(random<span style="color:#f92672">.</span>getrandbits(N))
    A <span style="color:#f92672">=</span> genA(Rq, r, l)
    s <span style="color:#f92672">=</span> vector(Rq, [small_secret() <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)])
    e <span style="color:#f92672">=</span> vector(Rq, [small_error() <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)])
    t <span style="color:#f92672">=</span> A<span style="color:#f92672">*</span>s <span style="color:#f92672">+</span> e

    <span style="color:#66d9ef">return</span> (t, r), (s, e)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(pk, m, r, e1):
    t, rh <span style="color:#f92672">=</span> pk
    t <span style="color:#f92672">=</span> vector(Rq, t)
    A <span style="color:#f92672">=</span> genA(Rq, rh, l)
    m <span style="color:#f92672">=</span> list(map(int, bin(m)[<span style="color:#ae81ff">2</span>:][::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
    m <span style="color:#f92672">=</span> Rq(m)
    e2 <span style="color:#f92672">=</span> small_error()
    u <span style="color:#f92672">=</span> A<span style="color:#f92672">.</span>transpose()<span style="color:#f92672">*</span>r <span style="color:#f92672">+</span> e1
    v <span style="color:#f92672">=</span> t<span style="color:#f92672">*</span>r <span style="color:#f92672">+</span> e2 <span style="color:#f92672">+</span> (q<span style="color:#f92672">//</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">*</span>m
    <span style="color:#66d9ef">return</span> (u, v)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(sk, ct):
    u, v <span style="color:#f92672">=</span> ct
    m <span style="color:#f92672">=</span> decode(Rq, [v <span style="color:#f92672">-</span> sk<span style="color:#f92672">*</span>u])[<span style="color:#ae81ff">0</span>]
    m <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>list()[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
    <span style="color:#66d9ef">return</span> int(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(map(str, m)), <span style="color:#ae81ff">2</span>)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">verify_small_vector</span>(v):
    <span style="color:#66d9ef">return</span> all([<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">&lt;=</span> i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">6</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]])

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">flatten</span>(u):
    b <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> u:
        j <span style="color:#f92672">=</span> i<span style="color:#f92672">.</span>list()
        j <span style="color:#f92672">=</span> j <span style="color:#f92672">+</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>(N<span style="color:#f92672">-</span>len(j))
        b <span style="color:#f92672">+=</span> j
    <span style="color:#66d9ef">return</span> vector(R, b)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">unflatten</span>(base_ring, v):
    v <span style="color:#f92672">=</span> list(v)
    <span style="color:#66d9ef">return</span> vector(
        base_ring,
        [base_ring(v[i<span style="color:#f92672">*</span>N: (i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>N]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(v)<span style="color:#f92672">//</span>N)]
    )

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">receive_vector</span>():
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    What you want to input here is a vector of dimension l over Rq.
</span><span style="color:#e6db74">    The way to do that is to create your vector, call the function &#34;flatten&#34; on it,
</span><span style="color:#e6db74">    and then send the resulting list as comma separated integers
</span><span style="color:#e6db74">    e.g: if your vector is v, you need to send str(flatten(v)).replace(&#34;[&#34;, &#34;&#34;).replace(&#34;]&#34;, &#34;&#34;)
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    a <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter vector: &#34;</span>)
    a <span style="color:#f92672">=</span> list(map(Integer, a<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)))
    
    <span style="color:#66d9ef">if</span> len(a) <span style="color:#f92672">!=</span> N<span style="color:#f92672">*</span>l:
        print (<span style="color:#e6db74">&#34;It&#39;s just a simple math challenge, no pwn trickery please&#34;</span>)
        exit()

    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> verify_small_vector(a):
        print (<span style="color:#e6db74">&#34;Is an error even an error if it&#39;s not small&#34;</span>)
        exit()
    
    <span style="color:#66d9ef">return</span> unflatten(Rq, a)

<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
    pt <span style="color:#f92672">=</span> randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">^</span><span style="color:#ae81ff">11</span>)
    print (<span style="color:#e6db74">&#34;plaintext: &#34;</span>, pt)
    challenge <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">^</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">11</span>)
    print (<span style="color:#e6db74">&#34;challenge: &#34;</span>, challenge)
    r <span style="color:#f92672">=</span> receive_vector()
    e1 <span style="color:#f92672">=</span> receive_vector()
    dif <span style="color:#f92672">=</span> decrypt(sk[<span style="color:#ae81ff">0</span>], encrypt(pk, pt, r, e1))<span style="color:#f92672">^^</span>pt
    <span style="color:#66d9ef">if</span> dif <span style="color:#f92672">!=</span> challenge:
        print (<span style="color:#e6db74">&#34;So much for perfect correctness&#34;</span>)
        exit()

print (<span style="color:#e6db74">&#34;OK, you win. Here&#39;s your flag&#34;</span>)
print (flag)
</code></pre></div><p>There&rsquo;s encryption and decryption implemented. It&rsquo;s mostly standard kyber. It&rsquo;s only &ldquo;reduced&rdquo; in the following 2 ways. Both the secret and public key are known (they&rsquo;re static but they&rsquo;re randomly generated. That was genuinely just to save our poor server some load)</p>
<p>The player is given a plaintext and a bit index from 0-11. The player is allowed to povide the randomness $s', e'$ for the encryption function, such that only the bit at the provided index is flipped when it&rsquo;s decrypted. Hence &ldquo;controlled decryption failure&rdquo; since we&rsquo;re required to control which bits are flipped by the failure.</p>
<p>Repeat 5 times
???
Flag!</p>
<h2 id="decryption-failure">Decryption Failure</h2>
<p>It&rsquo;s clear from the decryption function that Kyber does not have <strong>perfect correctness</strong>. Which is really an issue with most LWE based encryption schemes. Meaning that in rare cases, we may encounter a &ldquo;decryption failure&rdquo;. A decryption failure is the event where
$$m \neq Decrypt_{sk}(Encrypt_{pk}(m))$$</p>
<p>To model a failure, we&rsquo;ll borrow some notation from the &ldquo;<a href="https://eprint.iacr.org/2019/1399.pdf">failure boosting</a>&rdquo; line of research on Kyber (which I will not be going into here, just stealing their tools).</p>
<p>The final error as derived in the decryption section was $r = e^Ts' + e'' - s^Te'$</p>
<p>Let $S = \left[\begin{matrix}
-s \newline
e
\end{matrix}\right]$   $C = \left[\begin{matrix}
e' \newline
s'
\end{matrix}\right]$ $G = e''$
Then,
$$r = S^TC + G$$
And a failure occurs when $r_{\infty} &gt; \frac{q}{4}$ i.e
$$\frac{q}{4} \leq r_{\infty} \leq \frac{3q}{4}$$
Since G is small,
$$\frac{q}{4} \leq (S^TC)_{\infty} \leq \frac{3q}{4}$$
Note that S is made of elements in the secret key (known), C is made of encryption randomness (which the attacker controls). So for the challenge given S, we need to find C such that coefficient of $u^i$ in $S^TC$ is in $(\frac{q}{4}, \frac{3q}{4})$</p>
<p>The following transformation (also stolen from <a href="https://eprint.iacr.org/2019/1399.pdf">here</a>) can be used to calculate these coefficients individually</p>
<p>For $X \in R_q^{l \times 1}$, $\bar{X} \in Z_q^{lN \times 1}$ is the representation of $X$ where each polynomial in $R_q$ is decomposed into a list of its coefficients in $Z_q$.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bar</span>(base_ring, u, v):
    b <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> u:
        j <span style="color:#f92672">=</span> i<span style="color:#f92672">.</span>list()
        j <span style="color:#f92672">=</span> j <span style="color:#f92672">+</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>(N<span style="color:#f92672">-</span>len(j))
        b <span style="color:#f92672">+=</span> j
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v:
        j <span style="color:#f92672">=</span> i<span style="color:#f92672">.</span>list()
        j <span style="color:#f92672">=</span> j <span style="color:#f92672">+</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>(N<span style="color:#f92672">-</span>len(j))
        b <span style="color:#f92672">+=</span> j
    <span style="color:#66d9ef">return</span> vector(base_ring, b)
</code></pre></div><p>It&rsquo;s also easily reversible</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">unbar</span>(base_ring, v):
    v <span style="color:#f92672">=</span> list(v)
    <span style="color:#66d9ef">return</span> vector(
    base_ring, 
    [base_ring(v[i<span style="color:#f92672">*</span>N: (i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>N]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(v)<span style="color:#f92672">//</span>N)]
    )
</code></pre></div><p>For $C \in R_q^{l \times 1}$,
$$C^{(r)} = X^rC(X^{-1})\mod X^N + 1$$</p>
<p>$C^{(r)}$ is called the rotation of $C$ by r</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">evalinv</span>(c):
    c <span style="color:#f92672">=</span> list(c)<span style="color:#f92672">.</span>copy()
    <span style="color:#66d9ef">for</span> i, p <span style="color:#f92672">in</span> enumerate(c):
        c[i] <span style="color:#f92672">=</span> sum([x<span style="color:#f92672">*</span>(u<span style="color:#f92672">^-</span>j) <span style="color:#66d9ef">for</span> j,x <span style="color:#f92672">in</span> enumerate(p<span style="color:#f92672">.</span>list())])
    <span style="color:#66d9ef">return</span> vector(Rq, c)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rotation</span>(c, r):
    <span style="color:#66d9ef">return</span> (u<span style="color:#f92672">^</span>r)<span style="color:#f92672">*</span>evalinv(c)
</code></pre></div><p>Note that to reverse a rotation, we just need to rotate by the same r again</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">c <span style="color:#f92672">=</span> vector(Rq, [Rq<span style="color:#f92672">.</span>random_element() <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)])
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">100</span>):
    <span style="color:#66d9ef">assert</span>(c <span style="color:#f92672">==</span> rotation(rotation(c, j), j))
</code></pre></div><p>It is easy to verify that</p>
<p>$$S^TC = \sum_{i=0}^{N-1}\bar{S}^T\bar{C^{(i)}}.u^i$$</p>
<p>Now we can rewrite our problem statement as: Given $S$, to cause a decryption failure that flips the ith bit, we need  to find a $C$ that satisfies $\bar{S}^T\bar{C^{(i)}} \in (\frac{q}{4}, \frac{3q}{4})$</p>
<h2 id="attack">Attack</h2>
<p>Since C is completely made of small terms (and as a result so is any rotation of C), corrupting a bit boils down to computing small solutions for a linear inequality in $Z_q$.  (What you get after the inequality is a rotation of C, to corrupt a specific bit i, just reverse rotate it by i to obtain C). This is starting to smell eerily like a lattice problem.</p>
<p>we need to find a small $c_i$, such that
$$\frac{q}{4} \leq \sum{}s_ic_i \leq \frac{q}{4}$$</p>
<p>In other words we need to find small $c_i$ for atleast one target $t$, $\frac{q}{4} \leq t \leq \frac{q}{4}$ such that
$$\sum{}s_ic_i = t$$</p>
<p>For a given $t$, can be solved with CVP by using the following lattice basis and target vector
$$L\ =\ \left[\begin{matrix}
1 &amp; 0 &amp; .. &amp; .. &amp; s_0 \newline
0 &amp; 1 &amp; .. &amp; .. &amp; s_1 \newline
0 &amp; 0 &amp; 1 &amp; .. &amp; s_2 \newline
.. &amp; .. &amp; .. &amp; .. &amp; .. \newline
.. &amp; .. &amp; .. &amp; .. &amp; .. \newline
0 &amp; 0 &amp; 0 &amp; 0 &amp; q
\end{matrix}\right]$$</p>
<p>$$T = \left[0\ 0\ &hellip;. t\ \right]^T$$</p>
<p>We get a valid solution for C if $\frac{q}{4}
\leq CVP(L, T)[-1] \leq \frac{3q}{4}$ and all other elements (which give us C) are &ldquo;small&rdquo; enough to be accepted. We can&rsquo;t use the inequality repo directly, because you won&rsquo;t always find a small enough solution at a target of q/2 which is essentially what it tries to do minus lots of weighting stuff which we don&rsquo;t need. So to find this target, we start from q/2 and go outward from there.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">attack</span>(s, t):
    mat <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">129</span> <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">129</span>)]
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">128</span>):
        mat[i][i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
        mat[i][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> Integer(int(s[i]))
    mat[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>q
    mat <span style="color:#f92672">=</span> Matrix(ZZ, mat)
    v <span style="color:#f92672">=</span> vector(ZZ, [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">128</span> <span style="color:#f92672">+</span> [t])
    sol <span style="color:#f92672">=</span> solve_cvp(mat, v)
    <span style="color:#66d9ef">return</span> sol

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_small</span>(v):
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">&lt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">or</span> i <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">6</span>:
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_backdoor</span>(sk): 
    s, e <span style="color:#f92672">=</span> sk
    sbar <span style="color:#f92672">=</span> bar(R, <span style="color:#f92672">-</span>s, e)
    t <span style="color:#f92672">=</span> q<span style="color:#f92672">//</span><span style="color:#ae81ff">2</span>
    <span style="color:#66d9ef">for</span> offset <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">20</span>):
        <span style="color:#66d9ef">for</span> dir <span style="color:#f92672">in</span> (<span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
            v <span style="color:#f92672">=</span> attack(sbar, t <span style="color:#f92672">+</span> dir<span style="color:#f92672">*</span>offset)
            <span style="color:#66d9ef">if</span> check_small(v):
                <span style="color:#66d9ef">return</span> v
    print (<span style="color:#e6db74">&#34;attack failed&#34;</span>)
    exit()

C <span style="color:#f92672">=</span> unbar(Rq, generate_backdoor(sk))
</code></pre></div><p>There&rsquo;s roughly 1500 targets for the CVP between q/4 and 3q/4 but you only need to try about 100 values around q/2 to obtain solutions that fit within range. For the smaller parameters I used for the challenge, you get a hit in less than 5 tries (Much like rkm&rsquo;s repo, I didn&rsquo;t write a mathematical proof for why this works, but it makes intuitive sense if you think about it). Once you find said small solution, you just need to send reverse rotations of it for corrupting any bit you want and get the flag</p>
<p>Flag! <code>flag{1f_y0u_lW3_1t_th3n_y0u_b3tt3r_put_4_R1n6_0n_i7}</code></p>
<p>Yes, I&rsquo;m very proud of that pun</p>
<h2 id="complete-exploit">Complete Exploit</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> random

q <span style="color:#f92672">=</span> <span style="color:#ae81ff">3329</span>
R <span style="color:#f92672">=</span> Zmod(q)
N <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>
l <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
d <span style="color:#f92672">=</span> <span style="color:#ae81ff">11</span>
Rx<span style="color:#f92672">.&lt;</span>x<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> PolynomialRing(R)
Rq<span style="color:#f92672">.&lt;</span>u<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> Rx<span style="color:#f92672">.</span>quotient(x<span style="color:#f92672">^</span>N <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)

flag <span style="color:#f92672">=</span>  open(<span style="color:#e6db74">&#34;flag.txt&#34;</span>)<span style="color:#f92672">.</span>read()

<span style="color:#75715e"># My not so secret keys</span>
<span style="color:#75715e"># Static keys so you can precompute part of the solution to spare our poor VPS some load</span>
t <span style="color:#f92672">=</span> vector(Rq, [<span style="color:#ae81ff">3299</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3045</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2395</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">742</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2092</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">22</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2323</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">506</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2532</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1565</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">704</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">355</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1766</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1307</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1148</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1194</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2260</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1999</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1188</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">731</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">68</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">847</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2090</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2514</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3252</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">997</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2271</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">731</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1937</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">2574</span>, <span style="color:#ae81ff">2383</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3121</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">963</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1495</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2776</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2541</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2516</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2667</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2772</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">114</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1762</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">366</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1343</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2521</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1678</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3224</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">510</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1594</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3020</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3145</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1114</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1823</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1081</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1737</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2821</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2202</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2355</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2238</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">745</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">266</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">887</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">2731</span>])
rh <span style="color:#f92672">=</span> <span style="color:#ae81ff">3428567257</span>
s <span style="color:#f92672">=</span> vector(Rq, [<span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>])
e <span style="color:#f92672">=</span> vector(Rq, [<span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3326</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3328</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3327</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3326</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3327</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3328</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3327</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3327</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3326</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3328</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3328</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span>, <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">30</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">29</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">28</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">27</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">25</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">23</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">22</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">21</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">19</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">18</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">15</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">14</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3324</span><span style="color:#f92672">*</span>u<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> <span style="color:#ae81ff">3325</span>])

pk <span style="color:#f92672">=</span> (t, rh)
sk <span style="color:#f92672">=</span> (s, e)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">genA</span>(base_ring, r, l):
    random<span style="color:#f92672">.</span>seed(r)
    A <span style="color:#f92672">=</span> Matrix(
        base_ring, 
        [
            [
                base_ring([Integer(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
                <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N)]) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)
            ]
            <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)
        ]
    )
    <span style="color:#66d9ef">return</span> A

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(base_ring, v):
    v <span style="color:#f92672">=</span> list(v)<span style="color:#f92672">.</span>copy()
    <span style="color:#66d9ef">for</span> i, p <span style="color:#f92672">in</span> enumerate(v):
        coefs <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>list()
        <span style="color:#66d9ef">for</span> j, a <span style="color:#f92672">in</span> enumerate(coefs):
            coefs[j] <span style="color:#f92672">=</span> round((<span style="color:#ae81ff">2</span><span style="color:#f92672">/</span>q)<span style="color:#f92672">*</span>Integer(a))<span style="color:#f92672">%</span><span style="color:#ae81ff">2</span>
        v[i] <span style="color:#f92672">=</span> base_ring(coefs)
    <span style="color:#66d9ef">return</span> v

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">small_secret</span>():
    <span style="color:#66d9ef">return</span> Rq([randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N)])

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">small_error</span>():
    <span style="color:#66d9ef">return</span> Rq([randint(<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N)])

<span style="color:#75715e"># In case you plebs think testing it locally will make it any easier</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">keygen</span>():
    <span style="color:#66d9ef">global</span> l
    r <span style="color:#f92672">=</span> Integer(random<span style="color:#f92672">.</span>getrandbits(N))
    A <span style="color:#f92672">=</span> genA(Rq, r, l)
    s <span style="color:#f92672">=</span> vector(Rq, [small_secret() <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)])
    e <span style="color:#f92672">=</span> vector(Rq, [small_error() <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(l)])
    t <span style="color:#f92672">=</span> A<span style="color:#f92672">*</span>s <span style="color:#f92672">+</span> e

    <span style="color:#66d9ef">return</span> (t, r), (s, e)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(pk, m, r, e1):
    t, rh <span style="color:#f92672">=</span> pk
    t <span style="color:#f92672">=</span> vector(Rq, t)
    A <span style="color:#f92672">=</span> genA(Rq, rh, l)
    m <span style="color:#f92672">=</span> list(map(int, bin(m)[<span style="color:#ae81ff">2</span>:][::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
    m <span style="color:#f92672">=</span> Rq(m)
    e2 <span style="color:#f92672">=</span> small_error()
    u <span style="color:#f92672">=</span> A<span style="color:#f92672">.</span>transpose()<span style="color:#f92672">*</span>r <span style="color:#f92672">+</span> e1
    v <span style="color:#f92672">=</span> t<span style="color:#f92672">*</span>r <span style="color:#f92672">+</span> e2 <span style="color:#f92672">+</span> (q<span style="color:#f92672">//</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">*</span>m
    <span style="color:#66d9ef">return</span> (u, v)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(sk, ct):
    u, v <span style="color:#f92672">=</span> ct
    m <span style="color:#f92672">=</span> decode(Rq, [v <span style="color:#f92672">-</span> sk<span style="color:#f92672">*</span>u])[<span style="color:#ae81ff">0</span>]
    m <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>list()[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
    <span style="color:#66d9ef">return</span> int(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(map(str, m)), <span style="color:#ae81ff">2</span>)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">verify_small_vector</span>(v):
    <span style="color:#66d9ef">return</span> all([<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">&lt;=</span> i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">6</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]])

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">flatten</span>(u):
    b <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> u:
        j <span style="color:#f92672">=</span> i<span style="color:#f92672">.</span>list()
        j <span style="color:#f92672">=</span> j <span style="color:#f92672">+</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>(N<span style="color:#f92672">-</span>len(j))
        b <span style="color:#f92672">+=</span> j
    <span style="color:#66d9ef">return</span> vector(R, b)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">unflatten</span>(base_ring, v):
    v <span style="color:#f92672">=</span> list(v)
    <span style="color:#66d9ef">return</span> vector(
        base_ring,
        [base_ring(v[i<span style="color:#f92672">*</span>N: (i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>N]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(v)<span style="color:#f92672">//</span>N)]
    )

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">receive_vector</span>():
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    What you want to input here is a vector of dimension l over Rq.
</span><span style="color:#e6db74">    The way to do that is to create your vector, call the function &#34;flatten&#34; on it,
</span><span style="color:#e6db74">    and then send the resulting list as comma separated integers
</span><span style="color:#e6db74">    e.g: if your vector is v, you need to send str(flatten(v)).replace(&#34;[&#34;, &#34;&#34;).replace(&#34;]&#34;, &#34;&#34;)
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    a <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter vector: &#34;</span>)
    a <span style="color:#f92672">=</span> list(map(Integer, a<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)))
    
    <span style="color:#66d9ef">if</span> len(a) <span style="color:#f92672">!=</span> N<span style="color:#f92672">*</span>l:
        print (<span style="color:#e6db74">&#34;It&#39;s just a simple math challenge, no pwn trickery please&#34;</span>)
        exit()

    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> verify_small_vector(a):
        print (<span style="color:#e6db74">&#34;Is an error even an error if it&#39;s not small&#34;</span>)
        exit()
    
    <span style="color:#66d9ef">return</span> unflatten(Rq, a)

<span style="color:#75715e"># Solution/Testing</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bar</span>(base_ring, u, v):
    b <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> u:
        j <span style="color:#f92672">=</span> i<span style="color:#f92672">.</span>list()
        j <span style="color:#f92672">=</span> j <span style="color:#f92672">+</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>(N<span style="color:#f92672">-</span>len(j))
        b <span style="color:#f92672">+=</span> j
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v:
        j <span style="color:#f92672">=</span> i<span style="color:#f92672">.</span>list()
        j <span style="color:#f92672">=</span> j <span style="color:#f92672">+</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>(N<span style="color:#f92672">-</span>len(j))
        b <span style="color:#f92672">+=</span> j
    <span style="color:#66d9ef">return</span> vector(base_ring, b)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">unbar</span>(base_ring, v):
    v <span style="color:#f92672">=</span> list(v)
    <span style="color:#66d9ef">return</span> vector(
    base_ring, 
    [base_ring(v[i<span style="color:#f92672">*</span>N: (i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>N]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(v)<span style="color:#f92672">//</span>N)]
    )

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">evalinv</span>(c):
    c <span style="color:#f92672">=</span> list(c)<span style="color:#f92672">.</span>copy()
    <span style="color:#66d9ef">for</span> i, p <span style="color:#f92672">in</span> enumerate(c):
        c[i] <span style="color:#f92672">=</span> sum([x<span style="color:#f92672">*</span>(u<span style="color:#f92672">^-</span>j) <span style="color:#66d9ef">for</span> j,x <span style="color:#f92672">in</span> enumerate(p<span style="color:#f92672">.</span>list())])
    <span style="color:#66d9ef">return</span> vector(Rq, c)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rotation</span>(c, r):
    <span style="color:#66d9ef">return</span> (u<span style="color:#f92672">^</span>r)<span style="color:#f92672">*</span>evalinv(c)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve_cvp</span>(B, t):
    t_ <span style="color:#f92672">=</span> t <span style="color:#f92672">-</span> B<span style="color:#f92672">.</span>stack(t)<span style="color:#f92672">.</span>gram_schmidt()[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>row(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
    B_ <span style="color:#f92672">=</span> B<span style="color:#f92672">.</span>LLL()
    c <span style="color:#f92672">=</span> B_<span style="color:#f92672">.</span>solve_left(t_)
    c_ <span style="color:#f92672">=</span> vector(map(round, c))
    <span style="color:#66d9ef">return</span> c_ <span style="color:#f92672">*</span> B_

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">attack</span>(s, t):
    mat <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">129</span> <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">129</span>)]
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">128</span>):
        mat[i][i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
        mat[i][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> Integer(int(s[i]))
    mat[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>q
    mat <span style="color:#f92672">=</span> Matrix(ZZ, mat)
    v <span style="color:#f92672">=</span> vector(ZZ, [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">128</span> <span style="color:#f92672">+</span> [t])
    sol <span style="color:#f92672">=</span> solve_cvp(mat, v)
    <span style="color:#66d9ef">return</span> sol

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_small</span>(v):
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">&lt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">or</span> i <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">6</span>:
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_backdoor</span>(sk): 
    s, e <span style="color:#f92672">=</span> sk
    sbar <span style="color:#f92672">=</span> bar(R, <span style="color:#f92672">-</span>s, e)
    t <span style="color:#f92672">=</span> q<span style="color:#f92672">//</span><span style="color:#ae81ff">2</span>
    <span style="color:#66d9ef">for</span> offset <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">20</span>):
        <span style="color:#66d9ef">for</span> dir <span style="color:#f92672">in</span> (<span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
            v <span style="color:#f92672">=</span> attack(sbar, t <span style="color:#f92672">+</span> dir<span style="color:#f92672">*</span>offset)
            <span style="color:#66d9ef">if</span> check_small(v):
                <span style="color:#66d9ef">return</span> v
    print (<span style="color:#e6db74">&#34;attack failed&#34;</span>)
    exit()

C <span style="color:#f92672">=</span> unbar(Rq, generate_backdoor(sk))

print (<span style="color:#e6db74">&#34;backdoor generated:&#34;</span>, C)

<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
    pt <span style="color:#f92672">=</span> randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">^</span><span style="color:#ae81ff">11</span>)
    challenge <span style="color:#f92672">=</span> randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">11</span>)
    re <span style="color:#f92672">=</span> list(rotation(C, challenge))
    r <span style="color:#f92672">=</span> vector(Rq, re[<span style="color:#ae81ff">2</span>:])
    e1 <span style="color:#f92672">=</span> vector(Rq, re[:<span style="color:#ae81ff">2</span>])
    dif <span style="color:#f92672">=</span> decrypt(sk[<span style="color:#ae81ff">0</span>], encrypt(pk, pt, r, e1))<span style="color:#f92672">^^</span>pt
    print (dif <span style="color:#f92672">!=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> challenge))
</code></pre></div>]]></content></item></channel></rss>